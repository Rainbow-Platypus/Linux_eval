Generals

Différence entre GNU et Linux :

	GNU : Projet de logiciels libres (outils, compilateurs).

	Linux : Noyau créé par Linus Torvalds. Les deux ensemble forment un système d’exploitation.

Inventeur de Linux : Linus Torvalds. Autre programme célèbre : Git.



FileSystem

mkdir assets
touch assets/img_{1..10}.png
echo "Hello, world" > assets/du_texte.txt
for i in {1..10}; do mv assets/img_$i.png assets/img_$i.jpeg; done
mkdir assets/medias
mv assets/img_{1..10}.jpeg assets/medias/
echo '#!/usr/bin/env bash' > assets/script
echo 'echo "Hello world"' >> assets/script
chmod +x assets/script

Les formats de fichiers indiquent le type de données (image, texte).

Oui, pour aller un peu plus loin :
Sur windows cela permet à l'ordinateur de savoir avec quel programme il peut ouvrir le fichier, mais sur Linux c'est surtout l'en tête du fichier qui sert à cela.
Par contre dans certains cas cela aide le programme lancé pour lire le fichier
Un bon exemple est la manière dont certaines applications graphiques ou multimédias sous Linux se comportent :
Si on essaiee d’ouvrir un fichier .jpg avec un éditeur de texte comme nano, il ne prendra pas en compte l’extension et affichera du texte illisible.
Par contre, si on le renomme en .txt et qu'on tente de l’ouvrir avec "Eye of GNOME" (visionneuse d'images), il refusera de le charger.


Commandes

mkdir commandes
for i in {1..100}; do echo "Ligne $i" >> commandes/too_long; done
head -n 5 commandes/too_long
tail -n 7 commandes/too_long
sort -nr commandes/too_long | head -n 3
sed -n '42p' commandes/too_long
sed -i '42s/.*/The Ultimate Question of Life, the Universe and Everything/' commandes/too_long
echo '#!/usr/bin/env bash' > commandes/script
echo 'check_argv() { [ -n "$1" ] && return 1 || return 0; }' >> commandes/script
echo 'check_argv $1' >> commandes/script
echo 'echo $?' >> commandes/script
chmod +x commandes/script
echo 'case $2 in' >> commandes/script
echo '  hello) echo "Hello!";;' >> commandes/script
echo '  toto) echo "Toto!";;' >> commandes/script
echo '  *) echo "Autre chose!";;' >> commandes/script
echo 'esac' >> commandes/script

La ligne #!/usr/bin/env bash est l'interpréteur Bash. Elle permet d'exécuter le script directement.

Pour aller un peu plus loin : 
Avec ./script, le noyau lit la première ligne pour déterminer quel interpréteur lancer et transmet le script en argument.
La présence des permissions d'exécution est indispensable car le système vérifie que le fichier est exécutable.
En lançant le script avec la commande bash script, vous invoquez directement Bash pour qu’il interprète le contenu du fichier.
Dans ce cas, la ligne shebang est ignorée et il n’est pas nécessaire que le fichier possède les droits d’exécution.
Bash lit simplement le contenu du fichier grâce aux permissions de lecture.

Différence if/else et switch :

	if/else : Conditions multiples.

	switch : Comparaison d'une variable à plusieurs valeurs.

Oui,
Un if/else vérifie les conditions l'une après l'autre de manière linéaire.
Concrètement faits on aura tendance à utiliser un switch quand tous les cas on à peu près autant de chance d'arriver,
Alors qu'avec un if/else if on vérifie des conditions spécifiques (de la plus probable à la moins probable).

Niveau algo, sauf optimisation spécifique, if/else if/else sera linéaire O(n)
Pour un switch pareil cela dépend de l'implémentation du compilateur mais à priori il va générer une jump table et l'algo sera donc en O(1), similiaire à une hash table.


Users

cut -d: -f1 /etc/passwd
Au lieu d'afficher le contenu du fichier brut, on préferera souvent utiliser getent passwd (qui utilise la base de données systeme).
On abstrait le fait que les utilisateus sont stockés dans un fichier pour ne pas être tenté de modifier le fichier directement au lieu des programmes comme useradd etc (et donc de faire des erreurs potentielles).
Encore une fois cela dépendra toujours du contexte et de ce que vous êtes en train de faire.


sudo useradd -m Toto
sudo passwd Toto
groups Toto
sudo groupadd shared
sudo usermod -aG shared Toto
sudo usermod -aG shared $USER
sudo visudo
sudo visudo
echo 'echo "bienvenue toto"' >> /home/Toto/.bashrc

Préfixe sudo :

	Exécute une commande avec les privilèges root.

	Tous les utilisateurs ne peuvent pas l'utiliser.

Permissions

mkdir shared
sudo chown Toto:Toto shared
echo 'echo toto' > shared/owned_by_toto
sudo chown Toto:Toto shared/owned_by_toto
chmod +x shared/owned_by_toto
sudo chmod u+x shared/owned_by_toto

Commandes sudo chmod g+x owned_by_toto et sudo chown root:root owned_by_toto :

	sudo chmod g+x owned_by_toto : Donne les droits d'exécution au groupe pour le fichier.

	sudo chown root:root owned_by_toto : Change le propriétaire et le groupe du fichier à root.




Environnement

mkdir environ
echo '#!/usr/bin/env bash' > environ/set_env.sh
echo 'read -p "Choisissez l\'environnement (dev, prod, test): " ENVIRON' >> environ/set_env.sh
echo 'export ENVIRON' >> environ/set_env.sh
echo 'echo "Environnement défini à $ENVIRON"' >> environ/set_env.sh
chmod +x environ/set_env.sh
python3 -m venv environ/pythonvenv
source environ/pythonvenv/bin/activate
pip install flask
pip freeze > environ/requirements.txt
echo 'pythonvenv/' > environ/.gitignore

Commandes apt :

	update : Met à jour la liste des paquets.

	upgrade : Met à jour les paquets installés.

	autoclean : Supprime les paquets obsolètes.

	clean : Supprime les paquets téléchargés.

	autoremove : Supprime les paquets inutilisés.

	purge : Supprime les paquets et leurs fichiers de configuration.




Systemctl

sudo systemctl daemon-reload
sudo systemctl start <service>
sudo systemctl stop <service>
sudo systemctl restart <service>

Commandes systemctl :

	daemon-reload : Prend en compte les changements.

	start/stop : Démarre/arrête un service.

	restart : Redémarre un service.

Du coup on utilisera restart surtout dans les cas où on veut simplement prendre en compte des modifications de configuration.
A noter que restart de stop pas complètement le process, cela peut avoir une grosse importance, par exemple pour un service
de gestion de base de données tel que Postgres, stop + start créera une nouvelle connection à la base et pas restart. 



Cron

crontab -l
crontab -e

Tâches cron :

	crontab -l : Lister les tâches.

	crontab -e : Éditer les tâches.




Logs

echo '#!/usr/bin/env bash' > logs.sh
echo 'echo "$(whoami) $(date)" >> logs' >> logs.sh
chmod +x logs.sh
sudo journalctl --vacuum-size=200M
sudo nano /etc/logrotate.d/nginx

Niveaux de logs :

	emergency, alert, critical, error, warning, notice, info, debug.




Web

sudo ufw enable
sudo ufw disable
sudo ufw status

Différence HTTP et HTTPS :

	HTTP : Non sécurisé.

	HTTPS : Sécurisé avec SSL/TLS.

Programmes pour requêtes HTTP :

	curl, wget.

Ports réservés :

	80 : HTTP, 22 : SSH, 443 : HTTPS.

Pare-feu :

	ufw enable/disable : Activer/désactiver.

	ufw status : Lister les règles.

Nginx :

	Serveur web et proxy inverse.

MVC :

	Modèle-Vue-Contrôleur. Sépare les données, l'interface, et la logique.

CRUD :

	Create, Read, Update, Delete. Opérations de base pour les données.
